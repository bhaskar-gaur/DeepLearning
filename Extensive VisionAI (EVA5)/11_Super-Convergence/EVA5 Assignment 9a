{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"EVA5 Assignment 9a","provenance":[{"file_id":"1qErIs4xlcMO-nO_f2CszEiWEHfCniDsP","timestamp":1601138756535},{"file_id":"1NWCNq5Ze0ZLkAenFJPgqv7VEbFifFF95","timestamp":1601132346090},{"file_id":"1qpdLJp4OediTykcy-1vNe80TlUqr74Y4","timestamp":1597508628305},{"file_id":"1sQsNGSRokwfcZywTvCN8gBYS8wcxOuwt","timestamp":1597507690542},{"file_id":"1bK2849RIHEo2bo4biJGjKS7QFKtUvb0s","timestamp":1597490117691},{"file_id":"19Vr-31OD8EOCMAeN-1mm8p0B75Jr3SSI","timestamp":1597339689218},{"file_id":"10E-goV5iNm-ayj9DkLVSWy1V-2GUVm74","timestamp":1597329821302},{"file_id":"1uJZvJdi5VprOQHROtJIHy0mnY2afjNlx","timestamp":1597324324389}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"jC3ppYMtQoe9","executionInfo":{"status":"ok","timestamp":1601138119608,"user_tz":-330,"elapsed":911,"user":{"displayName":"Vidhya Shankar V","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgibVFpmsqOpOYqW5r1kRBYXglwZsL14PgzsJPT=s64","userId":"06672572748869395626"}},"outputId":"39f0bb5a-6115-4464-8c47-fc2d579634b9","colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["from datetime import datetime,timedelta\n","import random\n","print(datetime.now())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2020-09-26 16:35:19.632961\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0m2JWFliFfKT"},"source":["from __future__ import print_function\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torchvision import datasets, transforms"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"h_Cx9q2QFgM7"},"source":["class Net(nn.Module):\n","    def __init__(self, dropout_value=0.05, input_ch=3):\n","        super(Net, self).__init__()\n","        self.dropout_value = dropout_value\n","        self.input_ch = input_ch\n","\n","        # Input Block\n","        self.convblock1 = nn.Sequential(\n","            nn.Conv2d(in_channels=input_ch, out_channels=10, kernel_size=(\n","                3, 3), padding=1, bias=False),\n","            nn.BatchNorm2d(10),\n","            nn.ReLU(),\n","            nn.Dropout(self.dropout_value)\n","        )  # input =3, output=10 channels\n","\n","        self.convblock2 = nn.Sequential(\n","            nn.Conv2d(in_channels=13, out_channels=16, kernel_size=(\n","                3, 3), padding=1, bias=False),\n","            nn.BatchNorm2d(16),\n","            nn.ReLU(),\n","            nn.Dropout(self.dropout_value)\n","        )\n","\n","        self.pool1 = nn.MaxPool2d(2, 2)  # output_size = 11\n","\n","        self.convblock3 = nn.Sequential(\n","            nn.Conv2d(in_channels=29, out_channels=32, kernel_size=(\n","                3, 3), padding=1, bias=False),\n","            nn.BatchNorm2d(32),\n","            nn.ReLU(),\n","            nn.Dropout(self.dropout_value)\n","        )\n","\n","        self.convblock4 = nn.Sequential(\n","            nn.Conv2d(in_channels=61, out_channels=64, kernel_size=(\n","                3, 3), padding=1, bias=False),\n","            nn.BatchNorm2d(64),\n","            nn.ReLU(),\n","            nn.Dropout(self.dropout_value)\n","        )\n","\n","        self.convblock5 = nn.Sequential(\n","            nn.Conv2d(in_channels=125, out_channels=128, kernel_size=(\n","                3, 3), padding=1, bias=False),\n","            nn.BatchNorm2d(128),\n","            nn.ReLU(),\n","            nn.Dropout(self.dropout_value)\n","        )\n","\n","        self.convblock6 = nn.Sequential(\n","            nn.Conv2d(in_channels=224, out_channels=256, kernel_size=(\n","                3, 3), padding=1, bias=False),\n","            nn.BatchNorm2d(256),\n","            nn.ReLU(),\n","            nn.Dropout(self.dropout_value)\n","        )\n","\n","        self.convblock7 = nn.Sequential(\n","            nn.Conv2d(in_channels=480, out_channels=512, kernel_size=(\n","                3, 3), padding=1, bias=False),\n","            nn.BatchNorm2d(512),\n","            nn.ReLU(),\n","            nn.Dropout(self.dropout_value)\n","        )\n","\n","        self.convblock8 = nn.Sequential(\n","            nn.Conv2d(in_channels=992, out_channels=1024, kernel_size=(\n","                3, 3), padding=1, bias=False),\n","            nn.BatchNorm2d(1024),\n","            nn.ReLU(),\n","            nn.Dropout(self.dropout_value)\n","        )\n","\n","        self.gap = nn.Sequential(\n","            nn.AvgPool2d(kernel_size=8))\n","\n","        self.fc = nn.Sequential(nn.Linear(1024, 10))\n","\n","        self.convblock10 = nn.Sequential(\n","            nn.Conv2d(in_channels=1024, out_channels=10, kernel_size=(\n","                1, 1), padding=0, bias=False),\n","            # nn.BatchNorm2d(10),\n","            # nn.ReLU()\n","        )  # output_size = 5\n","\n","    \n","\n","    def forward(self, x):\n","        x2 = self.convblock1(x)\n","        x3 = self.convblock2(\n","            torch.cat((x, x2), dim=1))  # ip = 13, op=16\n","        # ch=32 size =16\n","        # ip 32, op32\n","        x4 = self.pool1(torch.cat((x, x2, x3), dim=1))\n","        x5 = self.convblock3(x4)  # inp 32, op=32\n","        x6 = self.convblock4(\n","            torch.cat((x4, x5), dim=1))  # ip 64, op 64\n","        x7 = self.convblock5(\n","            torch.cat((x4, x5, x6), dim=1))  # ip 128, op 128\n","\n","        x8 = self.pool1(\n","            torch.cat((x5, x6, x7), dim=1))  # 224\n","        x9 = self.convblock6(x8)  # inp 224, op 256\n","        x10 = self.convblock7(\n","            torch.cat((x8, x9), dim=1))  # 480 op 512\n","        x11 = self.convblock8(\n","            torch.cat((x8, x9, x10), dim=1))  # 1024\n","\n","        # out = F.avg_pool2d(x11, 8)\n","        # out = out.view(, -1)\n","        # out = self.linear(out)\n","\n","\n","        x12 = self.gap(x11)\n","        # x13 = self.convblock10(x12)\n","        x14 = x12.view(x12.size(0), -1)  # 10\n","        x15 = self.fc(x14)\n","        return F.log_softmax(x15, dim=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xdydjYTZFyi3","executionInfo":{"status":"ok","timestamp":1601138127094,"user_tz":-330,"elapsed":8377,"user":{"displayName":"Vidhya Shankar V","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgibVFpmsqOpOYqW5r1kRBYXglwZsL14PgzsJPT=s64","userId":"06672572748869395626"}},"outputId":"1e19129c-4c93-4c2d-b716-fcb083f51d49","colab":{"base_uri":"https://localhost:8080/","height":853}},"source":["!pip install torchsummary\n","from torchsummary import summary\n","use_cuda = torch.cuda.is_available()\n","device = torch.device(\"cuda\" if use_cuda else \"cpu\")\n","model = Net().to(device)\n","summary(model, input_size=(3, 32, 32))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: torchsummary in /usr/local/lib/python3.6/dist-packages (1.5.1)\n","----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Conv2d-1           [-1, 10, 32, 32]             270\n","       BatchNorm2d-2           [-1, 10, 32, 32]              20\n","              ReLU-3           [-1, 10, 32, 32]               0\n","           Dropout-4           [-1, 10, 32, 32]               0\n","            Conv2d-5           [-1, 16, 32, 32]           1,872\n","       BatchNorm2d-6           [-1, 16, 32, 32]              32\n","              ReLU-7           [-1, 16, 32, 32]               0\n","           Dropout-8           [-1, 16, 32, 32]               0\n","         MaxPool2d-9           [-1, 29, 16, 16]               0\n","           Conv2d-10           [-1, 32, 16, 16]           8,352\n","      BatchNorm2d-11           [-1, 32, 16, 16]              64\n","             ReLU-12           [-1, 32, 16, 16]               0\n","          Dropout-13           [-1, 32, 16, 16]               0\n","           Conv2d-14           [-1, 64, 16, 16]          35,136\n","      BatchNorm2d-15           [-1, 64, 16, 16]             128\n","             ReLU-16           [-1, 64, 16, 16]               0\n","          Dropout-17           [-1, 64, 16, 16]               0\n","           Conv2d-18          [-1, 128, 16, 16]         144,000\n","      BatchNorm2d-19          [-1, 128, 16, 16]             256\n","             ReLU-20          [-1, 128, 16, 16]               0\n","          Dropout-21          [-1, 128, 16, 16]               0\n","        MaxPool2d-22            [-1, 224, 8, 8]               0\n","           Conv2d-23            [-1, 256, 8, 8]         516,096\n","      BatchNorm2d-24            [-1, 256, 8, 8]             512\n","             ReLU-25            [-1, 256, 8, 8]               0\n","          Dropout-26            [-1, 256, 8, 8]               0\n","           Conv2d-27            [-1, 512, 8, 8]       2,211,840\n","      BatchNorm2d-28            [-1, 512, 8, 8]           1,024\n","             ReLU-29            [-1, 512, 8, 8]               0\n","          Dropout-30            [-1, 512, 8, 8]               0\n","           Conv2d-31           [-1, 1024, 8, 8]       9,142,272\n","      BatchNorm2d-32           [-1, 1024, 8, 8]           2,048\n","             ReLU-33           [-1, 1024, 8, 8]               0\n","          Dropout-34           [-1, 1024, 8, 8]               0\n","        AvgPool2d-35           [-1, 1024, 1, 1]               0\n","           Linear-36                   [-1, 10]          10,250\n","================================================================\n","Total params: 12,074,172\n","Trainable params: 12,074,172\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.01\n","Forward/backward pass size (MB): 6.24\n","Params size (MB): 46.06\n","Estimated Total Size (MB): 52.31\n","----------------------------------------------------------------\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DqTWLaM5GHgH","executionInfo":{"status":"ok","timestamp":1601138128551,"user_tz":-330,"elapsed":9826,"user":{"displayName":"Vidhya Shankar V","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgibVFpmsqOpOYqW5r1kRBYXglwZsL14PgzsJPT=s64","userId":"06672572748869395626"}},"outputId":"9fb2d8ee-6a3e-4616-bc3a-38f7d8f2f72e","colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["\n","\n","torch.manual_seed(1)\n","batch_size = 128\n","\n","kwargs = {'num_workers': 1, 'pin_memory': True} if use_cuda else {}\n","train_loader = torch.utils.data.DataLoader(\n","    datasets.CIFAR10('../data', train=True, download=True,\n","                    transform=transforms.Compose([\n","                        transforms.ToTensor(),\n","                        transforms.Normalize([0.49139968, 0.48215841, 0.44653091], \n","                                              [0.24703223, 0.24348513, 0.26158784])\n","                    ])),\n","    batch_size=batch_size, shuffle=True, **kwargs)\n","test_loader = torch.utils.data.DataLoader(\n","    datasets.CIFAR10('../data', train=False, transform=transforms.Compose([\n","                        transforms.ToTensor(),\n","                        transforms.Normalize([0.49139968, 0.48215841, 0.44653091], \n","                                              [0.24703223, 0.24348513, 0.26158784])\n","                    ])),\n","    batch_size=batch_size, shuffle=True, **kwargs)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Files already downloaded and verified\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8fDefDhaFlwH"},"source":["from tqdm import tqdm\n","def train(model, device, train_loader, optimizer, epoch):\n","    model.train()\n","    pbar = tqdm(train_loader)\n","    for batch_idx, (data, target) in enumerate(pbar):\n","        data, target = data.to(device), target.to(device)\n","        optimizer.zero_grad()\n","        output = model(data)\n","        loss = F.nll_loss(output, target)\n","        loss.backward()\n","        optimizer.step()\n","        pbar.set_description(desc= f'loss={loss.item()} batch_id={batch_idx}')\n","\n","\n","def test(model, device, test_loader):\n","    model.eval()\n","    test_loss = 0\n","    correct = 0\n","    with torch.no_grad():\n","        for data, target in test_loader:\n","            data, target = data.to(device), target.to(device)\n","            output = model(data)\n","            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss\n","            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability\n","            correct += pred.eq(target.view_as(pred)).sum().item()\n","\n","    test_loss /= len(test_loader.dataset)\n","\n","    print('\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'.format(\n","        test_loss, correct, len(test_loader.dataset),\n","        100. * correct / len(test_loader.dataset)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MMWbLWO6FuHb","executionInfo":{"status":"ok","timestamp":1601138742699,"user_tz":-330,"elapsed":623964,"user":{"displayName":"Vidhya Shankar V","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgibVFpmsqOpOYqW5r1kRBYXglwZsL14PgzsJPT=s64","userId":"06672572748869395626"}},"outputId":"af255040-cb9f-433b-d9d0-d7792473b8f9","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["\n","model = Net().to(device)\n","optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)\n","\n","for epoch in range(1, 20):\n","    train(model, device, train_loader, optimizer, epoch)\n","    test(model, device, test_loader)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["loss=0.9792808294296265 batch_id=390: 100%|██████████| 391/391 [00:28<00:00, 13.75it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 1.2577, Accuracy: 5673/10000 (56.73%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.7897161841392517 batch_id=390: 100%|██████████| 391/391 [00:28<00:00, 13.57it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.9654, Accuracy: 6454/10000 (64.54%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.7264156341552734 batch_id=390: 100%|██████████| 391/391 [00:29<00:00, 13.45it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 1.1478, Accuracy: 6346/10000 (63.46%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.5697579383850098 batch_id=390: 100%|██████████| 391/391 [00:29<00:00, 13.29it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.8738, Accuracy: 7060/10000 (70.60%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.5161594152450562 batch_id=390: 100%|██████████| 391/391 [00:29<00:00, 13.25it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.6380, Accuracy: 7839/10000 (78.39%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.4763156473636627 batch_id=390: 100%|██████████| 391/391 [00:29<00:00, 13.24it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.6111, Accuracy: 7923/10000 (79.23%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.3735465109348297 batch_id=390: 100%|██████████| 391/391 [00:29<00:00, 13.14it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.7400, Accuracy: 7543/10000 (75.43%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.3203255236148834 batch_id=390: 100%|██████████| 391/391 [00:30<00:00, 13.03it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.5902, Accuracy: 8099/10000 (80.99%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.3511465787887573 batch_id=390: 100%|██████████| 391/391 [00:30<00:00, 13.00it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.6813, Accuracy: 7848/10000 (78.48%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.27224665880203247 batch_id=390: 100%|██████████| 391/391 [00:29<00:00, 13.06it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.6524, Accuracy: 7995/10000 (79.95%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.2060047686100006 batch_id=390: 100%|██████████| 391/391 [00:30<00:00, 13.02it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.5543, Accuracy: 8216/10000 (82.16%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.4146219789981842 batch_id=390: 100%|██████████| 391/391 [00:30<00:00, 13.00it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.6343, Accuracy: 8048/10000 (80.48%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.18735474348068237 batch_id=390: 100%|██████████| 391/391 [00:30<00:00, 12.98it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.5346, Accuracy: 8335/10000 (83.35%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.2188045084476471 batch_id=390: 100%|██████████| 391/391 [00:30<00:00, 12.85it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.8420, Accuracy: 7732/10000 (77.32%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.16826216876506805 batch_id=390: 100%|██████████| 391/391 [00:30<00:00, 12.93it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.6254, Accuracy: 8261/10000 (82.61%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.10229052603244781 batch_id=390: 100%|██████████| 391/391 [00:30<00:00, 12.93it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.7594, Accuracy: 7985/10000 (79.85%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.06724023073911667 batch_id=390: 100%|██████████| 391/391 [00:30<00:00, 12.92it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.8079, Accuracy: 7839/10000 (78.39%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.09825790673494339 batch_id=390: 100%|██████████| 391/391 [00:29<00:00, 13.05it/s]\n","  0%|          | 0/391 [00:00<?, ?it/s]"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.6201, Accuracy: 8318/10000 (83.18%)\n","\n"],"name":"stdout"},{"output_type":"stream","text":["loss=0.04177556186914444 batch_id=390: 100%|██████████| 391/391 [00:29<00:00, 13.07it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["\n","Test set: Average loss: 0.5983, Accuracy: 8368/10000 (83.68%)\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UE7WT30APzHg","executionInfo":{"status":"ok","timestamp":1601138742706,"user_tz":-330,"elapsed":623965,"user":{"displayName":"Vidhya Shankar V","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgibVFpmsqOpOYqW5r1kRBYXglwZsL14PgzsJPT=s64","userId":"06672572748869395626"}},"outputId":"93deaaaf-f715-4420-c9d4-6b97f636cf34","colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["from datetime import datetime,timedelta\n","import random\n","print(datetime.now())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2020-09-26 16:45:42.660613\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CYvXulzFRFxj"},"source":[""],"execution_count":null,"outputs":[]}]}